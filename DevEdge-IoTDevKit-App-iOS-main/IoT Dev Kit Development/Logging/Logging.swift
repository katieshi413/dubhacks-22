//
//  Logging.swift
//  IoT Dev Kit Development
//
//  Created by Ahlberg, Kim on 6/2/22.
//  Copyright 2022 T-Mobile USA, Inc
//

import Foundation
import SwiftUI

/// Writes the message to the shared `Logger` instance, and to the standard output.
/// - Parameter source: Used to indicate if the log message originated from a connected DevEdge board or the app itself. Defaults to `.app`.
public func log(_ message: String, source: Logger.LoggingSource = .app) {
    Logger.shared.insertLog(message: message, source: source)
    print(message)
}

/// An observable class for storing a limited number of log events from the app and connected DevEdge boards.
public class Logger: ObservableObject {
    // MARK: Properties
    
    /// When the number of stored events exceed this, the oldest events are purged.
    var maximumLoggedEventsCount = 500 {
        didSet { purgeOldestEventsIfNecessary() }
    }
    
    /// The logged events, in order of most recent `.first` to oldest `.last`.
    @Published private(set) var loggedEvents = [LogEvent]()

    // MARK: - Types
    struct LogEvent: Identifiable {
        let id = UUID()
        private let dateFormatter: DateFormatter = {
            let dateFormatter = DateFormatter()
            dateFormatter.dateStyle = .none
            dateFormatter.timeStyle = .medium
            return dateFormatter
        }()
        
        let timestamp: Date
        var formattedTimestamp: String { dateFormatter.string(from: timestamp) }
        let message: String
        let context: LoggingSource
    }

    // The logging source lets us filter to only show the log events generated by either the connected board or the app.
    public enum LoggingSource {
        case app
        case board
    }
    
    // MARK: - Lifecycle
    
    // Singleton pattern with private initializer
    static let shared = Logger()
    private init() { }
    
    // MARK: Methods
    
    /// Inserts the message at the front of the `loggedEvents` array.
    func insertLog(message: String, source: LoggingSource) {
        loggedEvents.insert(LogEvent(timestamp: Date(), message: message, context: source), at: 0)
        purgeOldestEventsIfNecessary()
    }
    
    /// Removes all logged events.
    func removeAllLoggedEvents() {
        loggedEvents.removeAll()
    }
    
    // MARK: Private Methods
    
    private func purgeOldestEventsIfNecessary() {
        if loggedEvents.count >= maximumLoggedEventsCount {
            let eventsToRemoveCount = min(loggedEvents.count, loggedEvents.count - maximumLoggedEventsCount)
            loggedEvents.removeLast(eventsToRemoveCount)
        }
    }
}
